// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createOrUpdateUserStats = `-- name: CreateOrUpdateUserStats :one
INSERT INTO user_stats (user_id, total_study_ms, daily_study_ms, weekly_study_ms, monthly_study_ms)
VALUES ($1, $2, $2, $2, $2)
ON CONFLICT (user_id) DO UPDATE
SET 
  total_study_ms = user_stats.total_study_ms + $2,
  daily_study_ms = user_stats.daily_study_ms + $2,
  weekly_study_ms = user_stats.weekly_study_ms + $2,
  monthly_study_ms = user_stats.monthly_study_ms + $2
RETURNING user_id, total_study_ms, daily_study_ms, weekly_study_ms, monthly_study_ms, current_streak, max_streak, last_streak_date, streak_freezes
`

type CreateOrUpdateUserStatsParams struct {
	UserID       string        `json:"userId"`
	TotalStudyMs sql.NullInt64 `json:"totalStudyMs"`
}

func (q *Queries) CreateOrUpdateUserStats(ctx context.Context, arg CreateOrUpdateUserStatsParams) (UserStat, error) {
	row := q.db.QueryRowContext(ctx, createOrUpdateUserStats, arg.UserID, arg.TotalStudyMs)
	var i UserStat
	err := row.Scan(
		&i.UserID,
		&i.TotalStudyMs,
		&i.DailyStudyMs,
		&i.WeeklyStudyMs,
		&i.MonthlyStudyMs,
		&i.CurrentStreak,
		&i.MaxStreak,
		&i.LastStreakDate,
		&i.StreakFreezes,
	)
	return i, err
}

const createStudySession = `-- name: CreateStudySession :one
INSERT INTO study_sessions (user_id, start_time)
VALUES ($1, $2)
RETURNING session_id, user_id, start_time, end_time, duration_ms
`

type CreateStudySessionParams struct {
	UserID    sql.NullString `json:"userId"`
	StartTime time.Time      `json:"startTime"`
}

func (q *Queries) CreateStudySession(ctx context.Context, arg CreateStudySessionParams) (StudySession, error) {
	row := q.db.QueryRowContext(ctx, createStudySession, arg.UserID, arg.StartTime)
	var i StudySession
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.StartTime,
		&i.EndTime,
		&i.DurationMs,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (user_id, username)
VALUES ($1, $2)
ON CONFLICT (user_id) DO UPDATE SET username = $2
RETURNING user_id, username
`

type CreateUserParams struct {
	UserID   string         `json:"userId"`
	Username sql.NullString `json:"username"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.UserID, arg.Username)
	var i User
	err := row.Scan(&i.UserID, &i.Username)
	return i, err
}

const deleteOldStudySessions = `-- name: DeleteOldStudySessions :exec

DELETE FROM study_sessions
WHERE start_time < $1
`

// For top 10 users
func (q *Queries) DeleteOldStudySessions(ctx context.Context, startTime time.Time) error {
	_, err := q.db.ExecContext(ctx, deleteOldStudySessions, startTime)
	return err
}

const endStudySession = `-- name: EndStudySession :one
UPDATE study_sessions
SET end_time = $2, duration_ms = EXTRACT(EPOCH FROM ($2 - start_time)) * 1000
WHERE session_id = $1 AND end_time IS NULL
RETURNING session_id, user_id, start_time, end_time, duration_ms
`

type EndStudySessionParams struct {
	SessionID int32        `json:"sessionId"`
	EndTime   sql.NullTime `json:"endTime"`
}

func (q *Queries) EndStudySession(ctx context.Context, arg EndStudySessionParams) (StudySession, error) {
	row := q.db.QueryRowContext(ctx, endStudySession, arg.SessionID, arg.EndTime)
	var i StudySession
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.StartTime,
		&i.EndTime,
		&i.DurationMs,
	)
	return i, err
}

const getActiveStudySession = `-- name: GetActiveStudySession :one
SELECT session_id, user_id, start_time, end_time, duration_ms FROM study_sessions
WHERE user_id = $1 AND end_time IS NULL
LIMIT 1
`

func (q *Queries) GetActiveStudySession(ctx context.Context, userID sql.NullString) (StudySession, error) {
	row := q.db.QueryRowContext(ctx, getActiveStudySession, userID)
	var i StudySession
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.StartTime,
		&i.EndTime,
		&i.DurationMs,
	)
	return i, err
}

const getLeaderboard = `-- name: GetLeaderboard :many
SELECT
    u.username,
    us.total_study_ms,
    u.user_id -- Also select user_id for mentions
FROM
    user_stats us
JOIN
    users u ON us.user_id = u.user_id
WHERE
    us.total_study_ms > 0 -- Only show users who have studied
ORDER BY
    us.total_study_ms DESC
LIMIT 10
`

type GetLeaderboardRow struct {
	Username     sql.NullString `json:"username"`
	TotalStudyMs sql.NullInt64  `json:"totalStudyMs"`
	UserID       string         `json:"userId"`
}

func (q *Queries) GetLeaderboard(ctx context.Context) ([]GetLeaderboardRow, error) {
	rows, err := q.db.QueryContext(ctx, getLeaderboard)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLeaderboardRow
	for rows.Next() {
		var i GetLeaderboardRow
		if err := rows.Scan(&i.Username, &i.TotalStudyMs, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStreaksToReset = `-- name: GetStreaksToReset :many
SELECT 
    user_id, 
    guild_id, 
    current_streak_count, 
    max_streak_count, 
    last_streak_activity_timestamp, 
    warning_notified_at,
    created_at,
    updated_at
FROM user_streaks
WHERE current_streak_count > 0 
  AND last_streak_activity_timestamp < (NOW() - interval '24 hours')
`

type GetStreaksToResetRow struct {
	UserID                      string       `json:"userId"`
	GuildID                     string       `json:"guildId"`
	CurrentStreakCount          int32        `json:"currentStreakCount"`
	MaxStreakCount              int32        `json:"maxStreakCount"`
	LastStreakActivityTimestamp sql.NullTime `json:"lastStreakActivityTimestamp"`
	WarningNotifiedAt           sql.NullTime `json:"warningNotifiedAt"`
	CreatedAt                   time.Time    `json:"createdAt"`
	UpdatedAt                   time.Time    `json:"updatedAt"`
}

func (q *Queries) GetStreaksToReset(ctx context.Context) ([]GetStreaksToResetRow, error) {
	rows, err := q.db.QueryContext(ctx, getStreaksToReset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStreaksToResetRow
	for rows.Next() {
		var i GetStreaksToResetRow
		if err := rows.Scan(
			&i.UserID,
			&i.GuildID,
			&i.CurrentStreakCount,
			&i.MaxStreakCount,
			&i.LastStreakActivityTimestamp,
			&i.WarningNotifiedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStreaksToWarn = `-- name: GetStreaksToWarn :many
SELECT 
    user_id, 
    guild_id, 
    current_streak_count, 
    max_streak_count, 
    last_streak_activity_timestamp, 
    warning_notified_at,
    created_at,
    updated_at
FROM user_streaks
WHERE current_streak_count > 0
  AND last_streak_activity_timestamp BETWEEN (NOW() - interval '24 hours') AND (NOW() - interval '22 hours')
  AND (warning_notified_at IS NULL OR warning_notified_at < (NOW() - interval '23 hours'))
`

type GetStreaksToWarnRow struct {
	UserID                      string       `json:"userId"`
	GuildID                     string       `json:"guildId"`
	CurrentStreakCount          int32        `json:"currentStreakCount"`
	MaxStreakCount              int32        `json:"maxStreakCount"`
	LastStreakActivityTimestamp sql.NullTime `json:"lastStreakActivityTimestamp"`
	WarningNotifiedAt           sql.NullTime `json:"warningNotifiedAt"`
	CreatedAt                   time.Time    `json:"createdAt"`
	UpdatedAt                   time.Time    `json:"updatedAt"`
}

func (q *Queries) GetStreaksToWarn(ctx context.Context) ([]GetStreaksToWarnRow, error) {
	rows, err := q.db.QueryContext(ctx, getStreaksToWarn)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStreaksToWarnRow
	for rows.Next() {
		var i GetStreaksToWarnRow
		if err := rows.Scan(
			&i.UserID,
			&i.GuildID,
			&i.CurrentStreakCount,
			&i.MaxStreakCount,
			&i.LastStreakActivityTimestamp,
			&i.WarningNotifiedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT user_id, username FROM users
WHERE user_id = $1
`

func (q *Queries) GetUser(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(&i.UserID, &i.Username)
	return i, err
}

const getUserStats = `-- name: GetUserStats :one
SELECT user_id, total_study_ms, daily_study_ms, weekly_study_ms, monthly_study_ms, current_streak, max_streak, last_streak_date, streak_freezes FROM user_stats
WHERE user_id = $1
`

func (q *Queries) GetUserStats(ctx context.Context, userID string) (UserStat, error) {
	row := q.db.QueryRowContext(ctx, getUserStats, userID)
	var i UserStat
	err := row.Scan(
		&i.UserID,
		&i.TotalStudyMs,
		&i.DailyStudyMs,
		&i.WeeklyStudyMs,
		&i.MonthlyStudyMs,
		&i.CurrentStreak,
		&i.MaxStreak,
		&i.LastStreakDate,
		&i.StreakFreezes,
	)
	return i, err
}

const getUserStreak = `-- name: GetUserStreak :one


SELECT 
    user_id, 
    guild_id, 
    current_streak_count, 
    max_streak_count, 
    last_streak_activity_timestamp, 
    warning_notified_at,
    created_at,
    updated_at
FROM user_streaks
WHERE user_id = $1 AND guild_id = $2
`

type GetUserStreakParams struct {
	UserID  string `json:"userId"`
	GuildID string `json:"guildId"`
}

type GetUserStreakRow struct {
	UserID                      string       `json:"userId"`
	GuildID                     string       `json:"guildId"`
	CurrentStreakCount          int32        `json:"currentStreakCount"`
	MaxStreakCount              int32        `json:"maxStreakCount"`
	LastStreakActivityTimestamp sql.NullTime `json:"lastStreakActivityTimestamp"`
	WarningNotifiedAt           sql.NullTime `json:"warningNotifiedAt"`
	CreatedAt                   time.Time    `json:"createdAt"`
	UpdatedAt                   time.Time    `json:"updatedAt"`
}

// $1 will be the cutoff timestamp (e.g., 6 months ago)
// User Streaks Queries
func (q *Queries) GetUserStreak(ctx context.Context, arg GetUserStreakParams) (GetUserStreakRow, error) {
	row := q.db.QueryRowContext(ctx, getUserStreak, arg.UserID, arg.GuildID)
	var i GetUserStreakRow
	err := row.Scan(
		&i.UserID,
		&i.GuildID,
		&i.CurrentStreakCount,
		&i.MaxStreakCount,
		&i.LastStreakActivityTimestamp,
		&i.WarningNotifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const resetDailyStudyTime = `-- name: ResetDailyStudyTime :exec
UPDATE user_stats
SET daily_study_ms = 0
`

func (q *Queries) ResetDailyStudyTime(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetDailyStudyTime)
	return err
}

const resetMonthlyStudyTime = `-- name: ResetMonthlyStudyTime :exec
UPDATE user_stats
SET monthly_study_ms = 0
`

func (q *Queries) ResetMonthlyStudyTime(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetMonthlyStudyTime)
	return err
}

const resetUserStreakCount = `-- name: ResetUserStreakCount :exec

UPDATE user_streaks
SET current_streak_count = 0, updated_at = NOW()
WHERE user_id = $1 AND guild_id = $2
`

type ResetUserStreakCountParams struct {
	UserID  string `json:"userId"`
	GuildID string `json:"guildId"`
}

// Avoid re-warning too soon
func (q *Queries) ResetUserStreakCount(ctx context.Context, arg ResetUserStreakCountParams) error {
	_, err := q.db.ExecContext(ctx, resetUserStreakCount, arg.UserID, arg.GuildID)
	return err
}

const resetWeeklyStudyTime = `-- name: ResetWeeklyStudyTime :exec
UPDATE user_stats
SET weekly_study_ms = 0
`

func (q *Queries) ResetWeeklyStudyTime(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetWeeklyStudyTime)
	return err
}

const updateStreakWarningNotifiedAt = `-- name: UpdateStreakWarningNotifiedAt :exec
UPDATE user_streaks
SET warning_notified_at = $1, updated_at = NOW()
WHERE user_id = $2 AND guild_id = $3
`

type UpdateStreakWarningNotifiedAtParams struct {
	WarningNotifiedAt sql.NullTime `json:"warningNotifiedAt"`
	UserID            string       `json:"userId"`
	GuildID           string       `json:"guildId"`
}

func (q *Queries) UpdateStreakWarningNotifiedAt(ctx context.Context, arg UpdateStreakWarningNotifiedAtParams) error {
	_, err := q.db.ExecContext(ctx, updateStreakWarningNotifiedAt, arg.WarningNotifiedAt, arg.UserID, arg.GuildID)
	return err
}

const upsertUserStreak = `-- name: UpsertUserStreak :one
INSERT INTO user_streaks (
    user_id, 
    guild_id, 
    current_streak_count, 
    max_streak_count, 
    last_streak_activity_timestamp, 
    warning_notified_at,
    updated_at
)
VALUES ($1, $2, $3, $4, $5, $6, NOW())
ON CONFLICT (user_id, guild_id) DO UPDATE SET
    current_streak_count = EXCLUDED.current_streak_count,
    max_streak_count = GREATEST(user_streaks.max_streak_count, EXCLUDED.max_streak_count),
    last_streak_activity_timestamp = EXCLUDED.last_streak_activity_timestamp,
    warning_notified_at = EXCLUDED.warning_notified_at,
    updated_at = NOW()
RETURNING user_id, guild_id, current_streak_count, max_streak_count, last_streak_activity_timestamp, warning_notified_at, created_at, updated_at
`

type UpsertUserStreakParams struct {
	UserID                      string       `json:"userId"`
	GuildID                     string       `json:"guildId"`
	CurrentStreakCount          int32        `json:"currentStreakCount"`
	MaxStreakCount              int32        `json:"maxStreakCount"`
	LastStreakActivityTimestamp sql.NullTime `json:"lastStreakActivityTimestamp"`
	WarningNotifiedAt           sql.NullTime `json:"warningNotifiedAt"`
}

type UpsertUserStreakRow struct {
	UserID                      string       `json:"userId"`
	GuildID                     string       `json:"guildId"`
	CurrentStreakCount          int32        `json:"currentStreakCount"`
	MaxStreakCount              int32        `json:"maxStreakCount"`
	LastStreakActivityTimestamp sql.NullTime `json:"lastStreakActivityTimestamp"`
	WarningNotifiedAt           sql.NullTime `json:"warningNotifiedAt"`
	CreatedAt                   time.Time    `json:"createdAt"`
	UpdatedAt                   time.Time    `json:"updatedAt"`
}

func (q *Queries) UpsertUserStreak(ctx context.Context, arg UpsertUserStreakParams) (UpsertUserStreakRow, error) {
	row := q.db.QueryRowContext(ctx, upsertUserStreak,
		arg.UserID,
		arg.GuildID,
		arg.CurrentStreakCount,
		arg.MaxStreakCount,
		arg.LastStreakActivityTimestamp,
		arg.WarningNotifiedAt,
	)
	var i UpsertUserStreakRow
	err := row.Scan(
		&i.UserID,
		&i.GuildID,
		&i.CurrentStreakCount,
		&i.MaxStreakCount,
		&i.LastStreakActivityTimestamp,
		&i.WarningNotifiedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
